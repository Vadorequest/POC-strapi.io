input createOrganizationInput {
  data: OrganizationInput
}

type createOrganizationPayload {
  organization: Organization
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSchoolInput {
  data: SchoolInput
}

type createSchoolPayload {
  school: School
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteOrganizationInput {
  where: InputID
}

type deleteOrganizationPayload {
  organization: Organization
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSchoolInput {
  where: InputID
}

type deleteSchoolPayload {
  school: School
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editOrganizationInput {
  name: String
  label: String
  state: ENUM_ORGANIZATION_STATE
  logo: JSON
  apps: JSON
  schools: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSchoolInput {
  name: String
  label: String
  state: ENUM_SCHOOL_STATE
  programs: JSON
  formationTypes: JSON
  contacts: JSON
  organization: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

enum ENUM_ORGANIZATION_STATE {
  active
  inactive
}

enum ENUM_SCHOOL_STATE {
  active
  inactive
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Organization | createOrganizationPayload | updateOrganizationPayload | deleteOrganizationPayload | School | createSchoolPayload | updateSchoolPayload | deleteSchoolPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createOrganization(input: createOrganizationInput): createOrganizationPayload
  updateOrganization(input: updateOrganizationInput): updateOrganizationPayload
  deleteOrganization(input: deleteOrganizationInput): deleteOrganizationPayload
  createSchool(input: createSchoolInput): createSchoolPayload
  updateSchool(input: updateSchoolInput): updateSchoolPayload
  deleteSchool(input: deleteSchoolInput): deleteSchoolPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

"""A group of schools. Can also be a school."""
type Organization {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  label: String
  state: ENUM_ORGANIZATION_STATE
  logo: JSON
  apps: JSON
  schools(sort: String, limit: Int, start: Int, where: JSON): [School]
}

input OrganizationInput {
  name: String
  label: String
  state: ENUM_ORGANIZATION_STATE
  logo: JSON
  apps: JSON
  schools: [ID]
}

type Query {
  organization(id: ID!): Organization
  organizations(sort: String, limit: Int, start: Int, where: JSON): [Organization]
  school(id: ID!): School
  schools(sort: String, limit: Int, start: Int, where: JSON): [School]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""A school. Belongs to an organization."""
type School {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  label: String
  state: ENUM_SCHOOL_STATE
  programs: JSON
  formationTypes: JSON
  contacts: JSON
  organization: Organization
}

input SchoolInput {
  name: String
  label: String
  state: ENUM_SCHOOL_STATE
  programs: JSON
  formationTypes: JSON
  contacts: JSON
  organization: ID
}

input updateOrganizationInput {
  where: InputID
  data: editOrganizationInput
}

type updateOrganizationPayload {
  organization: Organization
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSchoolInput {
  where: InputID
  data: editSchoolInput
}

type updateSchoolPayload {
  school: School
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
